{"version":3,"file":"ngx-csv-parser.js","sources":["ng:/ngx-csv-parser/lib/_model/ngx-csv-parser-error.interface.ts","ng:/ngx-csv-parser/lib/ngx-csv-parser.service.ts","ng:/ngx-csv-parser/lib/ngx-csv-parser.component.ts","ng:/ngx-csv-parser/lib/ngx-csv-parser.module.ts","ng:/ngx-csv-parser/public-api.ts","ng:/ngx-csv-parser/ngx-csv-parser.ts"],"names":[],"mappings":"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","sourcesContent":["export class NgxCSVParserError {\r\n    type: string;     // A generalization of the error\r\n    code: number;     // Standardized error code\r\n    message: string;  // Human-readable details\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxCsvParser {\r\n\r\n  constructor() { \r\n    console.log(`\r\n      *****************************************************\r\n      ***      For Custom Software/Web development      ***\r\n      *** Reach out to us at contact@developershive.com ***\r\n      ***     Visit us at https://developershive.com    ***\r\n      *****************************************************\r\n    `);    \r\n  }\r\n\r\n  private defaultCSVParserConfig = {\r\n    header: true,\r\n    delimiter: ','\r\n  };\r\n\r\n  parse(csvFile: File, config: CSVParserConfig): Observable<Array<any>> {\r\n\r\n    config = {\r\n      ...this.defaultCSVParserConfig,\r\n      ...config\r\n    };\r\n\r\n    const ngxCSVParserObserver = Observable.create((observer: Observer<Array<any> | NgxCSVParserError>) => {\r\n      try {\r\n\r\n        let csvRecords = null;\r\n\r\n        if (this.isCSVFile(csvFile)) {\r\n\r\n          const reader = new FileReader();\r\n          reader.readAsText(csvFile);\r\n\r\n          reader.onload = () => {\r\n            const csvData = reader.result;\r\n            const csvRecordsArray = (csvData as string).trim().split(/\\r\\n|\\n/);\r\n\r\n            const headersRow = this.getHeaderArray(csvRecordsArray, config);\r\n\r\n            csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\r\n\r\n            observer.next(csvRecords);\r\n            observer.complete();\r\n          };\r\n\r\n          reader.onerror = () => {\r\n            this.badCSVDataFormatErrorHandler(observer);\r\n          };\r\n\r\n        } else {\r\n          this.notCSVFileErrorHandler(observer);\r\n        }\r\n\r\n      } catch (error) {\r\n        this.unknownCSVParserErrorHandler(observer);\r\n      }\r\n    });\r\n\r\n    return ngxCSVParserObserver;\r\n  }\r\n\r\n  getDataRecordsArrayFromCSVFile(csvRecordsArray: any, headerLength: any, config: any) {\r\n    const dataArr = [];\r\n    const headersArray = (csvRecordsArray[0] as string).split(config.delimiter);\r\n\r\n    const startingRowToParseData = config.header ? 1 : 0;\r\n\r\n    for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\r\n      const data = (csvRecordsArray[i] as string).split(config.delimiter);\r\n\r\n      if (data.length === headerLength && config.header) {\r\n\r\n        const csvRecord = {};\r\n\r\n        for (let j = 0; j < data.length; j++) {\r\n          csvRecord[headersArray[j]] = data[j].trim();\r\n        }\r\n        dataArr.push(csvRecord);\r\n      } else {\r\n        dataArr.push(data);\r\n      }\r\n    }\r\n    return dataArr;\r\n  }\r\n\r\n  isCSVFile(file: any) {\r\n    return file.name.endsWith('.csv');\r\n  }\r\n\r\n  getHeaderArray(csvRecordsArr: any, config: any) {\r\n    const headers = (csvRecordsArr[0] as string).split(config.delimiter);\r\n    const headerArray = [];\r\n    for (const header of headers) {\r\n      headerArray.push(header);\r\n    }\r\n    return headerArray;\r\n  }\r\n\r\n  notCSVFileErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'NOT_A_CSV_FILE';\r\n    ngcCSVParserError.message = 'Selected file is not a csv File Type';\r\n    ngcCSVParserError.code = 2;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n\r\n  unknownCSVParserErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'UNKNOWN_ERROR';\r\n    ngcCSVParserError.message = 'Unknown error. Please refer to official documentation for library usage.';\r\n    ngcCSVParserError.code = 404;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n\r\n  badCSVDataFormatErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'BAD_CSV_DATA_FORMAT';\r\n    ngcCSVParserError.message = 'Unable to parse CSV File';\r\n    ngcCSVParserError.code = 1;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n}\r\n\r\nclass CSVParserConfig {\r\n  header?: boolean;\r\n  delimiter?: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-csv-parser',\n  template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxCsvParserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCsvParserComponent } from './ngx-csv-parser.component';\nimport { NgxCsvParser } from './ngx-csv-parser.service';\n\n@NgModule({\n  declarations: [NgxCsvParserComponent],\n  imports: [\n  ],\n  providers: [NgxCsvParser],\n  exports: [NgxCsvParserComponent]\n})\nexport class NgxCsvParserModule { }\n","/*\n * Public API Surface of ngx-csv-parser\n */\n\nexport * from './lib/ngx-csv-parser.service';\nexport * from './lib/_model/ngx-csv-parser-error.interface';\nexport * from './lib/ngx-csv-parser.component';\nexport * from './lib/ngx-csv-parser.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}