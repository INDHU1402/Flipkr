import { __assign, __decorate, __values } from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';
import * as i0 from "@angular/core";
var NgxCsvParser = /** @class */ (function () {
    function NgxCsvParser() {
        this.defaultCSVParserConfig = {
            header: true,
            delimiter: ','
        };
        console.log("\n      *****************************************************\n      ***      For Custom Software/Web development      ***\n      *** Reach out to us at contact@developershive.com ***\n      ***     Visit us at https://developershive.com    ***\n      *****************************************************\n    ");
    }
    NgxCsvParser.prototype.parse = function (csvFile, config) {
        var _this = this;
        config = __assign(__assign({}, this.defaultCSVParserConfig), config);
        var ngxCSVParserObserver = Observable.create(function (observer) {
            try {
                var csvRecords_1 = null;
                if (_this.isCSVFile(csvFile)) {
                    var reader_1 = new FileReader();
                    reader_1.readAsText(csvFile);
                    reader_1.onload = function () {
                        var csvData = reader_1.result;
                        var csvRecordsArray = csvData.trim().split(/\r\n|\n/);
                        var headersRow = _this.getHeaderArray(csvRecordsArray, config);
                        csvRecords_1 = _this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);
                        observer.next(csvRecords_1);
                        observer.complete();
                    };
                    reader_1.onerror = function () {
                        _this.badCSVDataFormatErrorHandler(observer);
                    };
                }
                else {
                    _this.notCSVFileErrorHandler(observer);
                }
            }
            catch (error) {
                _this.unknownCSVParserErrorHandler(observer);
            }
        });
        return ngxCSVParserObserver;
    };
    NgxCsvParser.prototype.getDataRecordsArrayFromCSVFile = function (csvRecordsArray, headerLength, config) {
        var dataArr = [];
        var headersArray = csvRecordsArray[0].split(config.delimiter);
        var startingRowToParseData = config.header ? 1 : 0;
        for (var i = startingRowToParseData; i < csvRecordsArray.length; i++) {
            var data = csvRecordsArray[i].split(config.delimiter);
            if (data.length === headerLength && config.header) {
                var csvRecord = {};
                for (var j = 0; j < data.length; j++) {
                    csvRecord[headersArray[j]] = data[j].trim();
                }
                dataArr.push(csvRecord);
            }
            else {
                dataArr.push(data);
            }
        }
        return dataArr;
    };
    NgxCsvParser.prototype.isCSVFile = function (file) {
        return file.name.endsWith('.csv');
    };
    NgxCsvParser.prototype.getHeaderArray = function (csvRecordsArr, config) {
        var e_1, _a;
        var headers = csvRecordsArr[0].split(config.delimiter);
        var headerArray = [];
        try {
            for (var headers_1 = __values(headers), headers_1_1 = headers_1.next(); !headers_1_1.done; headers_1_1 = headers_1.next()) {
                var header = headers_1_1.value;
                headerArray.push(header);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (headers_1_1 && !headers_1_1.done && (_a = headers_1.return)) _a.call(headers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return headerArray;
    };
    NgxCsvParser.prototype.notCSVFileErrorHandler = function (observer) {
        var ngcCSVParserError = new NgxCSVParserError();
        ngcCSVParserError.type = 'NOT_A_CSV_FILE';
        ngcCSVParserError.message = 'Selected file is not a csv File Type';
        ngcCSVParserError.code = 2;
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.prototype.unknownCSVParserErrorHandler = function (observer) {
        var ngcCSVParserError = new NgxCSVParserError();
        ngcCSVParserError.type = 'UNKNOWN_ERROR';
        ngcCSVParserError.message = 'Unknown error. Please refer to official documentation for library usage.';
        ngcCSVParserError.code = 404;
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.prototype.badCSVDataFormatErrorHandler = function (observer) {
        var ngcCSVParserError = new NgxCSVParserError();
        ngcCSVParserError.type = 'BAD_CSV_DATA_FORMAT';
        ngcCSVParserError.message = 'Unable to parse CSV File';
        ngcCSVParserError.code = 1;
        observer.error(ngcCSVParserError);
    };
    NgxCsvParser.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxCsvParser_Factory() { return new NgxCsvParser(); }, token: NgxCsvParser, providedIn: "root" });
    NgxCsvParser = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], NgxCsvParser);
    return NgxCsvParser;
}());
export { NgxCsvParser };
var CSVParserConfig = /** @class */ (function () {
    function CSVParserConfig() {
    }
    return CSVParserConfig;
}());
//# sourceMappingURL=data:application/json;base64,