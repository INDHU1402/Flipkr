{"version":3,"file":"ngx-csv-parser.js","sources":["ng://ngx-csv-parser/lib/_model/ngx-csv-parser-error.interface.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.service.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.component.ts","ng://ngx-csv-parser/lib/ngx-csv-parser.module.ts","ng://ngx-csv-parser/public-api.ts","ng://ngx-csv-parser/ngx-csv-parser.ts"],"sourcesContent":["export class NgxCSVParserError {\r\n    type: string;     // A generalization of the error\r\n    code: number;     // Standardized error code\r\n    message: string;  // Human-readable details\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Observer } from 'rxjs';\r\nimport { NgxCSVParserError } from './_model/ngx-csv-parser-error.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxCsvParser {\r\n\r\n  constructor() { \r\n    console.log(`\r\n      *****************************************************\r\n      ***      For Custom Software/Web development      ***\r\n      *** Reach out to us at contact@developershive.com ***\r\n      ***     Visit us at https://developershive.com    ***\r\n      *****************************************************\r\n    `);    \r\n  }\r\n\r\n  private defaultCSVParserConfig = {\r\n    header: true,\r\n    delimiter: ','\r\n  };\r\n\r\n  parse(csvFile: File, config: CSVParserConfig): Observable<Array<any>> {\r\n\r\n    config = {\r\n      ...this.defaultCSVParserConfig,\r\n      ...config\r\n    };\r\n\r\n    const ngxCSVParserObserver = Observable.create((observer: Observer<Array<any> | NgxCSVParserError>) => {\r\n      try {\r\n\r\n        let csvRecords = null;\r\n\r\n        if (this.isCSVFile(csvFile)) {\r\n\r\n          const reader = new FileReader();\r\n          reader.readAsText(csvFile);\r\n\r\n          reader.onload = () => {\r\n            const csvData = reader.result;\r\n            const csvRecordsArray = (csvData as string).trim().split(/\\r\\n|\\n/);\r\n\r\n            const headersRow = this.getHeaderArray(csvRecordsArray, config);\r\n\r\n            csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\r\n\r\n            observer.next(csvRecords);\r\n            observer.complete();\r\n          };\r\n\r\n          reader.onerror = () => {\r\n            this.badCSVDataFormatErrorHandler(observer);\r\n          };\r\n\r\n        } else {\r\n          this.notCSVFileErrorHandler(observer);\r\n        }\r\n\r\n      } catch (error) {\r\n        this.unknownCSVParserErrorHandler(observer);\r\n      }\r\n    });\r\n\r\n    return ngxCSVParserObserver;\r\n  }\r\n\r\n  getDataRecordsArrayFromCSVFile(csvRecordsArray: any, headerLength: any, config: any) {\r\n    const dataArr = [];\r\n    const headersArray = (csvRecordsArray[0] as string).split(config.delimiter);\r\n\r\n    const startingRowToParseData = config.header ? 1 : 0;\r\n\r\n    for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\r\n      const data = (csvRecordsArray[i] as string).split(config.delimiter);\r\n\r\n      if (data.length === headerLength && config.header) {\r\n\r\n        const csvRecord = {};\r\n\r\n        for (let j = 0; j < data.length; j++) {\r\n          csvRecord[headersArray[j]] = data[j].trim();\r\n        }\r\n        dataArr.push(csvRecord);\r\n      } else {\r\n        dataArr.push(data);\r\n      }\r\n    }\r\n    return dataArr;\r\n  }\r\n\r\n  isCSVFile(file: any) {\r\n    return file.name.endsWith('.csv');\r\n  }\r\n\r\n  getHeaderArray(csvRecordsArr: any, config: any) {\r\n    const headers = (csvRecordsArr[0] as string).split(config.delimiter);\r\n    const headerArray = [];\r\n    for (const header of headers) {\r\n      headerArray.push(header);\r\n    }\r\n    return headerArray;\r\n  }\r\n\r\n  notCSVFileErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'NOT_A_CSV_FILE';\r\n    ngcCSVParserError.message = 'Selected file is not a csv File Type';\r\n    ngcCSVParserError.code = 2;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n\r\n  unknownCSVParserErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'UNKNOWN_ERROR';\r\n    ngcCSVParserError.message = 'Unknown error. Please refer to official documentation for library usage.';\r\n    ngcCSVParserError.code = 404;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n\r\n  badCSVDataFormatErrorHandler(observer: Observer<any>) {\r\n    const ngcCSVParserError: NgxCSVParserError = new NgxCSVParserError();\r\n    ngcCSVParserError.type = 'BAD_CSV_DATA_FORMAT';\r\n    ngcCSVParserError.message = 'Unable to parse CSV File';\r\n    ngcCSVParserError.code = 1;\r\n    observer.error(ngcCSVParserError);\r\n  }\r\n}\r\n\r\nclass CSVParserConfig {\r\n  header?: boolean;\r\n  delimiter?: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-csv-parser',\n  template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxCsvParserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxCsvParserComponent } from './ngx-csv-parser.component';\nimport { NgxCsvParser } from './ngx-csv-parser.service';\n\n@NgModule({\n  declarations: [NgxCsvParserComponent],\n  imports: [\n  ],\n  providers: [NgxCsvParser],\n  exports: [NgxCsvParserComponent]\n})\nexport class NgxCsvParserModule { }\n","/*\n * Public API Surface of ngx-csv-parser\n */\n\nexport * from './lib/ngx-csv-parser.service';\nexport * from './lib/_model/ngx-csv-parser-error.interface';\nexport * from './lib/ngx-csv-parser.component';\nexport * from './lib/ngx-csv-parser.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}